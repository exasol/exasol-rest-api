name: Go Build
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  matrix-build:
    strategy:
      matrix:
        include:
          - go: "1.24.1"
            db: "7.1.30"
# Will be enabled in a separate PR
#          - go: "1.24.1"
#            db: "8.34.0"
    env:
      DEFAULT_GO: "1.24.1"
      DEFAULT_DB: "7.1.30"
    name: Build with Go ${{ matrix.go }} and Exasol ${{ matrix.db }}
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache OpenFastTrace
        uses: actions/cache@v3
        with:
          path: |
            /tmp/oft/
          key: oft-${{ hashFiles('trace-requirements.sh') }}
          restore-keys: |
            oft-

      - name: Trace requirements
        if: matrix.go == env.DEFAULT_GO && matrix.db == env.DEFAULT_DB
        run: ./trace-requirements.sh

      - name: Build Docker Image
        run: docker buildx build --tag rest-api-test-image:latest .

      - name: Install Swag
        run: go install github.com/swaggo/swag/cmd/swag@v1.16.4

      - name: Generate Swagger API Description
        run: ./generate-swagger-docs

      - name: Run short tests
        run: go test -v -p 1 -short ./...

      - name: Run all tests with Exasol ${{ matrix.db }}
        run: go test -v -p 1 -coverprofile=coverage.out ./... -timeout 2000s
        env:
          EXASOL_DB_VERSION: ${{ matrix.db }}
          
      - name: SonarCloud Scan
        if: matrix.go == env.DEFAULT_GO && matrix.db == env.DEFAULT_DB && github.repository_owner == 'exasol'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: 2.1.6
          skip-cache: true

      - name: Run Go vulnerability check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -show verbose ./...

      - name: Configure broken links checker
        run: |
          mkdir -p ./target
          echo '{"aliveStatusCodes": [429, 200], "ignorePatterns": [' \
               '{"pattern": "^https?://(www|dev).mysql.com/"},' \
               '{"pattern": "^https?://(www.)?opensource.org"}' \
               '{"pattern": "^https?://(www.)?eclipse.org"}' \
               '{"pattern": "^https?://projects.eclipse.org"}' \
               ']}' > ./target/broken_links_checker.json
      - uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"
          use-verbose-mode: "yes"
          config-file: ./target/broken_links_checker.json
  
  build:
    needs: matrix-build
    runs-on: ubuntu-latest
    steps:
      - run: echo "Build successful"
